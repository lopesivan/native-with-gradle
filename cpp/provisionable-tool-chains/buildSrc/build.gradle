import org.apache.commons.compress.archivers.tar.TarArchiveEntry
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream
import org.apache.commons.compress.compressors.xz.XZCompressorInputStream
import org.apache.commons.compress.utils.IOUtils
import org.apache.commons.io.FileUtils
import org.gradle.api.provider.Property
import org.gradle.api.provider.Provider

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.attribute.FileTime
import java.nio.file.attribute.PosixFilePermission

buildscript {
    dependencies {
        classpath "org.apache.commons:commons-compress:1.16.1"
        classpath "commons-io:commons-io:2.6"
        classpath "org.tukaani:xz:1.0"
    }
    repositories {
        mavenCentral()
    }
}

class DownloadToolChainTask extends DefaultTask {
    @Input  // URL is assumed to always point at the same file
    final Property<URL> fromUrl = project.objects.property(URL)

    @OutputFile
    final RegularFileProperty outputFile = newOutputFile()

    @TaskAction
    private void download() {
        IOUtils.copy(fromUrl.get().newInputStream(), outputFile.get().asFile.newOutputStream())
    }
}

class ExtractToolChainTask extends DefaultTask {
    @InputFile
    final RegularFileProperty toolChainArchive = newInputFile()

    // Currently cannot use the OutputDirectory annotation on directory containing symbolic links to non-existing files
    // See https://github.com/gradle/gradle/issues/4428
    // Use a done file instead
    //@OutputDirectory
    final DirectoryProperty toolChainLocation = newOutputDirectory()

    @OutputFile  // See comment on toolChainLocation property
    final Provider<File> doneFile = project.provider {new File(toolChainLocation.get().asFile.absolutePath + ".done")}

    @TaskAction
    private void extract() {
        doneFile.get().delete()
        FileUtils.deleteDirectory(toolChainLocation.get().asFile)

        InputStream fileStream = Files.newInputStream(toolChainArchive.get().asFile.toPath());
        TarArchiveInputStream tarStream = new TarArchiveInputStream(createDecompressStream(fileStream))

        File outputDir = toolChainLocation.asFile.get()
        try {
            for (TarArchiveEntry entry = tarStream.getNextTarEntry(); entry != null; entry = tarStream.getNextTarEntry()) {
                String entryPath = entry.getName().split("[\\/]").drop(1).join("/")
                final File file = new File(outputDir, entryPath)
                if (entry.isDirectory()) {
                    continue
                }

                file.getParentFile().mkdirs()
                if (entry.isSymbolicLink()) {
                    Files.createSymbolicLink(file.toPath(), Paths.get(entry.getLinkName()))
                } else if (entry.isFile()) {
                    OutputStream outStream = file.newOutputStream()
                    IOUtils.copy(tarStream, outStream)
                    IOUtils.closeQuietly(outStream)

                    Files.setLastModifiedTime(file.toPath(), FileTime.from(entry.getLastModifiedDate().toInstant()))
                    file.setExecutable((entry.getMode() & toModeBit(PosixFilePermission.OWNER_EXECUTE)) > 0, true)
                } else {
                    continue
                }
            }
        } catch (EOFException ex) {
            // Ignore EOF exception
        }

        IOUtils.closeQuietly(tarStream)

        doneFile.get().createNewFile()
    }

    private InputStream createDecompressStream(InputStream inputStream) {
        String archiveName = toolChainArchive.get().asFile.name
        if (archiveName.endsWith('.tar.xz')) {
            return new XZCompressorInputStream(inputStream)
        } else if (archiveName.endsWith('.tar.gz')) {
            return new GzipCompressorInputStream(inputStream)
        }
        throw new IllegalArgumentException('Tool chain archive uses unsupported compression')
    }

    private static int toModeBit(PosixFilePermission permission) {
        return 1 << permission.ordinal()
    }
}

task downloadClangToolChain(type: DownloadToolChainTask) {
    String osName = System.getProperty('os.name').toLowerCase()
    if (osName.contains('mac')) {
        fromUrl = new URL("http://releases.llvm.org/5.0.1/clang+llvm-5.0.1-x86_64-apple-darwin.tar.xz")
    } else if (osName.contains('linux')) {
        fromUrl = new URL("http://releases.llvm.org/5.0.1/clang+llvm-5.0.1-x86_64-linux-gnu-ubuntu-14.04.tar.xz")
    } else {
        throw new UnsupportedOperationException("Clang tool chain provisioning doesn't support operating system '${System.getProperty('os.name')}'")
    }
    outputFile = layout.buildDirectory.file('clang-5.0.1.tar.xz')
}

task extractClangToolChain(type: ExtractToolChainTask) {
    toolChainArchive = downloadClangToolChain.outputFile
    toolChainLocation = layout.buildDirectory.dir('toolChains/clang-5.0.1')
}

task provisionClangToolChain {
    dependsOn extractClangToolChain
    group = 'Tool Chain Provisioning'
    description = 'Provision Clang 5.0.1 tool chain'
}

tasks.build.dependsOn provisionClangToolChain
